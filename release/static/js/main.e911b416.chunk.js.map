{"version":3,"sources":["authProvider.js","dataProvider.js","constants.js","components/users.js","components/clients.js","components/notificationtypes.js","components/configurations.js","components/calltypes.js","App.js","reportWebVitals.js","index.js","environment.js","inMemoryJwt.js"],"names":["authProvider","login","username","password","headers","Headers","append","Buffer","from","toString","request","Request","LOGIN_URL","method","fetch","then","response","status","Error","statusText","token","get","inMemoryJWT","setToken","logout","ereaseToken","Promise","resolve","checkAuth","getToken","reject","checkError","error","getPermissions","httpClient","url","options","Accept","set","fetchUtils","fetchJson","getList","resource","params","API_URL","json","data","total","length","getMany","query","filter","JSON","stringify","id","ids","getOne","update","body","create","delete","previousData","deleteMany","ROLES","name","RULE_TYPES","UserList","props","List","sort","field","order","Datagrid","rowClick","TextField","label","source","SelectField","choices","UserEdit","Edit","SimpleForm","TextInput","PasswordInput","AutocompleteInput","UserCreate","Create","ClientsList","ReferenceField","reference","ClientEdit","ReferenceInput","SelectInput","optionText","ClientCreate","NotificationTypeList","BooleanField","NotificationTypeEdit","multiline","BooleanInput","NotificationTypeCreate","ConfigurationList","ArrayField","FunctionField","render","ruleType","_","ReferenceArrayField","SingleFieldList","ChipField","ConfigurationEdit","ArrayInput","SimpleFormIterator","FormDataConsumer","formData","scopedFormData","getSource","rest","ConfigurationCreate","CallTypeList","CallTypeEdit","CallTypeCreate","App","Admin","dataProvider","Resource","list","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","process","inMemoryJWTManager"],"mappings":"qHAAA,gCAGMA,EAAe,CACjBC,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACZC,EAAU,IAAIC,QAClBD,EAAQE,OAAO,gBAAiB,SAAWC,EAAOC,KAAKN,EAAW,IAAMC,GAAUM,SAAS,WAC3FL,EAAQE,OAAO,eAAgB,oBAC/B,IAAMI,EAAU,IAAIC,QAAQC,IAAW,CACnCC,OAAQ,MACRT,QAASA,IAEb,OAAOU,MAAMJ,GACRK,MAAK,SAACC,GACH,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC5C,MAAM,IAAIC,MAAMF,EAASG,YAE7B,IAAIC,EAAQJ,EAASZ,QAAQiB,IAAI,iBACjCC,IAAYC,SAASH,OAGjCI,OAAQ,WAEJ,OADAF,IAAYG,cACLC,QAAQC,WAGnBC,UAAW,WACP,OAAON,IAAYO,WAAaH,QAAQC,UAAYD,QAAQI,UAGhEC,WAAY,SAACC,GACT,IAAMf,EAASe,EAAMf,OACrB,OAAe,MAAXA,GAA6B,MAAXA,GAClBK,IAAYG,cACLC,QAAQI,UAEZJ,QAAQC,WAGnBM,eAAgB,WACZ,OAAOX,IAAYO,WAAaH,QAAQC,UAAYD,QAAQI,WAIrD9B,Q,uNCvCTkC,EAAa,SAACC,EAAKC,GACjBA,IAASA,EAAU,IACnBA,EAAQhC,UACRgC,EAAQhC,QAAU,IAAIC,QAAQ,CAAEgC,OAAQ,sBAG5C,IAAMjB,EAAQE,IAAYO,WAK1B,OAJIT,GACAgB,EAAQhC,QAAQkC,IAAI,gBAApB,iBAA+ClB,IAG5CmB,IAAWC,UAAUL,EAAKC,IAItB,GACXK,QAAS,SAACC,EAAUC,GAChB,IAAMR,EAAG,UAAMS,IAAN,YAAiBF,GAC1B,OAAOR,EAAWC,GAAKpB,MAAK,cAAGX,QAAH,IAAYyC,EAAZ,EAAYA,KAAZ,MAAwB,CAChDC,KAAMD,EACNE,MAAOF,EAAKG,YAIpBC,QAAS,SAACP,EAAUC,GAChB,IAAMO,EAAQ,CACVC,OAAQC,KAAKC,UAAU,CAAEC,GAAIX,EAAOY,OAElCpB,EAAG,UAAMS,IAAN,YAAiBF,EAAjB,YAA6BW,oBAAUH,IAChD,OAAOhB,EAAWC,GAAKpB,MAAK,kBAAe,CAAE+B,KAAjB,EAAGD,UAGnCW,OAAQ,SAACd,EAAUC,GACf,IAAMR,EAAG,UAAMS,IAAN,YAAiBF,EAAjB,YAA6BC,EAAOW,IAC7C,OAAOpB,EAAWC,GAAKpB,MAAK,kBAAe,CAAE+B,KAAjB,EAAGD,UAGnCY,OAAQ,SAACf,EAAUC,GACf,OAAOT,EAAW,GAAD,OAAIU,IAAJ,YAAeF,GAAY,CACxC7B,OAAQ,MACR6C,KAAMN,KAAKC,UAAUV,EAAOG,QAC7B/B,MAAK,kBAAa,CAAC+B,KAAd,EAAED,UAGdc,OAAQ,SAACjB,EAAUC,GACf,OAAOT,EAAW,GAAD,OAAIU,IAAJ,YAAeF,GAAY,CACxC7B,OAAQ,OACR6C,KAAMN,KAAKC,UAAUV,EAAOG,QAC7B/B,MAAK,kBAAa,CAAC+B,KAAd,EAAED,UAGde,OAAQ,SAAClB,EAAUC,GACf,OAAOT,EAAW,GAAD,OAAIU,IAAJ,YAAeF,EAAf,YAA2BC,EAAOW,IAAK,CACpDzC,OAAQ,WACTE,MAAK,cAAE8B,KAAF,MAAa,CAACC,KAAMH,EAAOkB,kBAGvCC,WAAY,SAACpB,EAAUC,GACnB,OAAOT,EAAW,GAAD,OAAIU,IAAJ,YAAeF,EAAf,iBAAgCC,EAAOY,KAAM,CAC1D1C,OAAQ,WACTE,MAAK,cAAE8B,KAAF,MAAa,CAACC,KAAM,S,2GCjEvBiB,EAAQ,CACjB,CAACT,GAAG,aAAcU,KAAK,SACvB,CAACV,GAAG,YAAaU,KAAK,SAEbC,EAAa,CACtB,CAACX,GAAG,SAAUU,KAAK,UACnB,CAACV,GAAG,oBAAqBU,KAAK,sB,OCFrBE,EAAW,SAAAC,GAAK,OACzB,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,KAAM,CAACC,MAAO,WAAYC,MAAO,QAAlD,SACI,eAACC,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACC,EAAA,EAAD,CAAWC,MAAM,YAAYC,OAAO,aACpC,cAACC,EAAA,EAAD,CAAaD,OAAO,OAAOE,QAASf,WAKnCgB,EAAW,SAAAZ,GAAK,OACzB,cAACa,EAAA,EAAD,2BAAUb,GAAV,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,aAClB,cAACO,EAAA,EAAD,CAAeP,OAAO,aACtB,cAACQ,EAAA,EAAD,CAAmBR,OAAO,OAAOE,QAASf,WAKzCsB,EAAa,SAAAlB,GAAK,OAC3B,cAACmB,EAAA,EAAD,2BAAYnB,GAAZ,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,aAClB,cAACO,EAAA,EAAD,CAAeP,OAAO,aACtB,cAACQ,EAAA,EAAD,CAAmBR,OAAO,OAAOE,QAASf,W,2BCXzCwB,EAAc,SAAApB,GAAK,OAC5B,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,KAAM,CAACC,MAAO,OAAQC,MAAO,QAA9C,SACI,eAACC,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACC,EAAA,EAAD,CAAWE,OAAO,SAClB,cAACY,EAAA,EAAD,CAAgBZ,OAAO,SAASa,UAAU,QAA1C,SAAkD,cAACf,EAAA,EAAD,CAAWE,OAAO,sBAKnEc,EAAa,SAAAvB,GAAK,OAC3B,cAACa,EAAA,EAAD,2BAAUb,GAAV,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACe,EAAA,EAAD,CAAgBf,OAAO,SAASa,UAAU,QAA1C,SAAkD,cAACG,EAAA,EAAD,CAAaC,WAAW,sBAKzEC,EAAe,SAAA3B,GAAK,OAC7B,cAACmB,EAAA,EAAD,2BAAYnB,GAAZ,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACe,EAAA,EAAD,CAAgBf,OAAO,SAASa,UAAU,QAA1C,SAAkD,cAACG,EAAA,EAAD,CAAaC,WAAW,sB,kBCpCzEE,EAAuB,SAAA5B,GAAK,OACrC,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,KAAM,CAACC,MAAO,QAASC,MAAO,QAA/C,SACI,eAACC,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACC,EAAA,EAAD,CAAWE,OAAO,gBAClB,cAACF,EAAA,EAAD,CAAWE,OAAO,UAClB,cAACF,EAAA,EAAD,CAAWE,OAAO,SAClB,cAACF,EAAA,EAAD,CAAWE,OAAO,gBAClB,cAACoB,EAAA,EAAD,CAAcpB,OAAO,wBAKpBqB,EAAuB,SAAA9B,GAAK,OACrC,cAACa,EAAA,EAAD,2BAAUb,GAAV,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWP,MAAM,eAAeC,OAAO,gBACvC,cAACM,EAAA,EAAD,CAAWN,OAAO,UAClB,cAACM,EAAA,EAAD,CAAWgB,WAAW,EAAMtB,OAAO,SACnC,cAACM,EAAA,EAAD,CAAWN,OAAO,gBAClB,cAACuB,EAAA,EAAD,CAAcvB,OAAO,wBAKpBwB,EAAyB,SAAAjC,GAAK,OACvC,cAACmB,EAAA,EAAD,2BAAYnB,GAAZ,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,gBAClB,cAACM,EAAA,EAAD,CAAWN,OAAO,UAClB,cAACM,EAAA,EAAD,CAAWgB,WAAW,EAAMtB,OAAO,SACnC,cAACM,EAAA,EAAD,CAAWN,OAAO,gBAClB,cAACuB,EAAA,EAAD,CAAcvB,OAAO,wB,oQCVpByB,GAAoB,SAAAlC,GAAK,OAClC,cAACC,EAAA,EAAD,2BAAUD,GAAV,IAAiBE,KAAM,CAACC,MAAO,OAAQC,MAAO,QAA9C,SACI,eAACC,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACe,EAAA,EAAD,CAAgBZ,OAAO,WAAWa,UAAU,UAA5C,SAAsD,cAACf,EAAA,EAAD,CAAWE,OAAO,WACxE,cAACF,EAAA,EAAD,CAAWE,OAAO,SAElB,cAAC0B,EAAA,EAAD,CAAY3B,MAAM,kBAAkBC,OAAO,iBAA3C,SACI,eAACJ,EAAA,EAAD,WACI,cAACE,EAAA,EAAD,CAAWC,MAAM,YAAYC,OAAO,aACpC,cAAC2B,EAAA,EAAD,CAAe5B,MAAM,QAAQ6B,OAAQ,gBAAEC,EAAF,EAAEA,SAAF,EAAYC,EAAZ,MACpB,WAAbD,GACG,cAACjB,EAAA,EAAD,CAAgBZ,OAAO,QAAQa,UAAU,UAAzC,SAAmD,cAACf,EAAA,EAAD,CAAWE,OAAO,YACrE,cAACY,EAAA,EAAD,CAAgBZ,OAAO,QAAQa,UAAU,oBAAzC,SAA6D,cAACf,EAAA,EAAD,CAAWE,OAAO,0BAO9F,cAAC+B,EAAA,EAAD,CAAqBhC,MAAM,qBAAqBC,OAAO,oBAAoBa,UAAU,oBAArF,SACI,cAACmB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWjC,OAAO,cAI1B,cAAC+B,EAAA,EAAD,CAAqBhC,MAAM,aAAaC,OAAO,YAAYa,UAAU,YAArE,SACI,cAACmB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWjC,OAAO,2BAOzBkC,GAAoB,SAAA3C,GAAK,OAClC,cAACa,EAAA,EAAD,2BAAUb,GAAV,aACI,eAACc,EAAA,EAAD,WACI,cAACU,EAAA,EAAD,CAAgBf,OAAO,WAAWa,UAAU,UAA5C,SAAsD,cAACG,EAAA,EAAD,CAAaC,WAAW,WAC9E,cAACX,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACmC,EAAA,EAAD,CAAYnC,OAAO,iBAAnB,SAAoC,eAACoC,EAAA,EAAD,WAChC,cAAC5B,EAAA,EAAD,CAAmBT,MAAM,YAAYC,OAAO,WAAWE,QAASb,IAChE,cAACgD,EAAA,EAAD,UACK,cACKC,SADL,IAEKC,EAFL,EAEKA,eACAC,EAHL,EAGKA,UACGC,EAJR,wBAMGF,GAA8C,WAA5BA,EAAeV,UAE7B,cAACd,EAAA,EAAD,yBAAgBhB,MAAM,QAAQC,OAAQwC,EAAU,SAChC3B,UAAU,WAAc4B,GADxC,aAC8C,cAACzB,EAAA,EAAD,CAC1CC,WAAW,eAI3B,cAACoB,EAAA,EAAD,UACK,cACKC,SADL,IAEKC,EAFL,EAEKA,eACAC,EAHL,EAGKA,UACGC,EAJR,yBAMGF,GAA8C,sBAA5BA,EAAeV,UAE7B,cAACd,EAAA,EAAD,yBAAgBhB,MAAM,QAAQC,OAAQwC,EAAU,SAChC3B,UAAU,qBAAwB4B,GADlD,aACwD,cAACzB,EAAA,EAAD,CACpDC,WAAW,qBAM/B,cAACkB,EAAA,EAAD,CAAYnC,OAAO,oBAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,oBAA1B,SAA8C,cAACG,EAAA,EAAD,CAAaC,WAAW,gBAG9E,cAACkB,EAAA,EAAD,CAAYnC,OAAO,YAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,YAA1B,SAAsC,cAACG,EAAA,EAAD,CAAaC,WAAW,6BAOrEyB,GAAsB,SAAAnD,GAAK,OACpC,cAACmB,EAAA,EAAD,2BAAYnB,GAAZ,aACI,eAACc,EAAA,EAAD,WACI,cAACU,EAAA,EAAD,CAAgBf,OAAO,WAAWa,UAAU,UAA5C,SAAsD,cAACG,EAAA,EAAD,CAAaC,WAAW,WAC9E,cAACX,EAAA,EAAD,CAAWN,OAAO,SAClB,cAACmC,EAAA,EAAD,CAAYnC,OAAO,iBAAnB,SAAoC,eAACoC,EAAA,EAAD,WAChC,cAAC5B,EAAA,EAAD,CAAmBT,MAAM,YAAYC,OAAO,WAAWE,QAASb,IAChE,cAACgD,EAAA,EAAD,UACK,cACKC,SADL,IAEKC,EAFL,EAEKA,eACAC,EAHL,EAGKA,UACGC,EAJR,yBAMGF,GAA8C,WAA5BA,EAAeV,UAE7B,cAACd,EAAA,EAAD,yBAAgBhB,MAAM,QAAQC,OAAQwC,EAAU,SAChC3B,UAAU,WAAc4B,GADxC,aAC8C,cAACzB,EAAA,EAAD,CAC1CC,WAAW,eAI3B,cAACoB,EAAA,EAAD,UACK,cACKC,SADL,IAEKC,EAFL,EAEKA,eACAC,EAHL,EAGKA,UACGC,EAJR,yBAMGF,GAA8C,sBAA5BA,EAAeV,UAE7B,cAACd,EAAA,EAAD,yBAAgBhB,MAAM,QAAQC,OAAQwC,EAAU,SAChC3B,UAAU,qBAAwB4B,GADlD,aACwD,cAACzB,EAAA,EAAD,CACpDC,WAAW,qBAM/B,cAACkB,EAAA,EAAD,CAAYnC,OAAO,oBAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,oBAA1B,SAA8C,cAACG,EAAA,EAAD,CAAaC,WAAW,gBAG9E,cAACkB,EAAA,EAAD,CAAYnC,OAAO,YAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,YAA1B,SAAsC,cAACG,EAAA,EAAD,CAAaC,WAAW,6BCtIrE0B,GAAe,SAAApD,GAAK,OAC7B,cAACC,EAAA,EAAD,2BAAUD,GAAV,aACI,eAACK,EAAA,EAAD,CAAUC,SAAS,OAAnB,UACI,cAACC,EAAA,EAAD,CAAWE,OAAO,gBAClB,cAAC+B,EAAA,EAAD,CAAqB/B,OAAO,eAAea,UAAU,UAArD,SACI,cAACmB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWjC,OAAO,oBAOzB4C,GAAe,SAAArD,GAAK,OAC/B,cAACa,EAAA,EAAD,2BAAUb,GAAV,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,gBAClB,cAACmC,EAAA,EAAD,CAAYnC,OAAO,eAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,UAA1B,SAAoC,cAACG,EAAA,EAAD,CAAaC,WAAW,sBAOjE4B,GAAiB,SAAAtD,GAAK,OAC/B,cAACmB,EAAA,EAAD,2BAAYnB,GAAZ,aACI,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWN,OAAO,gBAClB,cAACmC,EAAA,EAAD,CAAYnC,OAAO,eAAnB,SACI,cAACoC,EAAA,EAAD,UACI,cAACrB,EAAA,EAAD,CAAgBF,UAAU,UAA1B,SAAoC,cAACG,EAAA,EAAD,CAAaC,WAAW,sBChCjE6B,OAZf,WACE,OACI,eAACC,EAAA,EAAD,CAAOC,aAAcA,EAAc5H,aAAcA,IAAjD,UACE,cAAC6H,EAAA,EAAD,CAAU7D,KAAK,QAAQ8D,KAAM5D,EAAU6D,KAAMhD,EAAUpB,OAAQ0B,IAC/D,cAACwC,EAAA,EAAD,CAAU7D,KAAK,UAAU8D,KAAMvC,EAAawC,KAAMrC,EAAY/B,OAAQmC,IACtE,cAAC+B,EAAA,EAAD,CAAU7D,KAAK,oBAAoB8D,KAAM/B,EAAsBgC,KAAM9B,EAAsBtC,OAAQyC,EAAwBhE,QAAS,CAAEuC,MAAO,wBAC7I,cAACkD,EAAA,EAAD,CAAU7D,KAAK,iBAAiB8D,KAAMzB,GAAmB0B,KAAMjB,GAAmBnD,OAAQ2D,KAC1F,cAACO,EAAA,EAAD,CAAU7D,KAAK,YAAY8D,KAAMP,GAAcQ,KAAMP,GAAc7D,OAAQ8D,SCNpEO,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnH,MAAK,YAAkD,IAA/CoH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAShC,OACP,cAAC,IAAMiC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,M,gCChBA,oEAAO,IACMpF,EAAO,UADYgG,wBACZ,QACPhI,EAAS,UAAMgC,EAAN,iB,gCCoBPiG,IAtBY,WACvB,IAAIvH,EAAc,KAclB,MAAO,CACHG,YANgB,WAEhB,OADAH,EAAc,MACP,GAKPO,SAda,kBAAMP,GAenBC,SAba,SAACH,GAEd,OADAE,EAAcF,GACP,IAeAyH,K","file":"static/js/main.e911b416.chunk.js","sourcesContent":["import inMemoryJWT from './inMemoryJwt';\nimport {LOGIN_URL} from \"./environment\";\n\nconst authProvider = {\n    login: ({ username, password }) => {\n        let headers = new Headers();\n        headers.append('Authorization', 'Basic ' + Buffer.from(username + ':' + password).toString('base64'));\n        headers.append('Content-Type', 'application/json');\n        const request = new Request(LOGIN_URL, {\n            method: 'GET',\n            headers: headers\n        });\n        return fetch(request)\n            .then((response) => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                let token = response.headers.get('Authorization')\n                inMemoryJWT.setToken(token);\n            })\n    },\n    logout: () => {\n        inMemoryJWT.ereaseToken();\n        return Promise.resolve();\n    },\n\n    checkAuth: () => {\n        return inMemoryJWT.getToken() ? Promise.resolve() : Promise.reject();\n    },\n\n    checkError: (error) => {\n        const status = error.status;\n        if (status === 401 || status === 403) {\n            inMemoryJWT.ereaseToken();\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n\n    getPermissions: () => {\n        return inMemoryJWT.getToken() ? Promise.resolve() : Promise.reject();\n    },\n};\n\nexport default authProvider;\n","import {fetchUtils} from 'react-admin';\nimport {stringify} from  'querystring';\nimport inMemoryJWT from './inMemoryJwt';\nimport {API_URL} from \"./environment\";\n\nconst httpClient = (url, options) => {\n    if(!options){options = {}}\n    if(!options.headers){\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n\n    const token = inMemoryJWT.getToken();\n    if (token) {\n        options.headers.set('Authorization', `Bearer ${token}`);\n    }\n\n    return fetchUtils.fetchJson(url, options);\n};\n\n\nexport default {\n    getList: (resource, params) => {\n        const url = `${API_URL}/${resource}`;\n        return httpClient(url).then(({ headers, json }) => ({\n            data: json,\n            total: json.length\n        }));\n    },\n\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${API_URL}/${resource}?${stringify(query)}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n\n    getOne: (resource, params) => {\n        const url = `${API_URL}/${resource}/${params.id}`;\n        return httpClient(url).then(({ json }) => ({ data: json }));\n    },\n\n    update: (resource, params) => {\n        return httpClient(`${API_URL}/${resource}`, {\n            method: 'PUT',\n            body: JSON.stringify(params.data),\n        }).then(({json}) => ({data: json}))\n    },\n\n    create: (resource, params) => {\n        return httpClient(`${API_URL}/${resource}`, {\n            method: 'POST',\n            body: JSON.stringify(params.data),\n        }).then(({json}) => ({data: json}))\n    },\n\n    delete: (resource, params) => {\n        return httpClient(`${API_URL}/${resource}/${params.id}`,{\n            method: 'DELETE'\n        }).then(({json}) => ({data: params.previousData}))\n    },\n\n    deleteMany: (resource, params) => {\n        return httpClient(`${API_URL}/${resource}/many/${params.ids}`,{\n            method: 'DELETE',\n        }).then(({json}) => ({data: []}))\n    },\n\n}\n","export const ROLES = [\n    {id:\"ROLE_ADMIN\", name:\"Admin\"},\n    {id:\"ROLE_USER\", name:\"User\"}\n]\nexport const RULE_TYPES = [\n    {id:\"SENDER\", name:\"Sender\"},\n    {id:\"NOTIFICATION_TYPE\", name:\"Notification Type\"}\n]\n\n","import * as React from 'react';\nimport {SelectField, List, Datagrid, TextField, Edit, SimpleForm, TextInput, PasswordInput, Create, AutocompleteInput} from 'react-admin';\nimport {ROLES} from \"../constants\";\n\nexport const UserList = props => (\n    <List {...props} sort={{field: \"userName\", order: \"DESC\"}}>\n        <Datagrid rowClick=\"edit\">\n            <TextField label=\"User Name\" source=\"userName\"/>\n            <SelectField source=\"role\" choices={ROLES}/>\n        </Datagrid>\n    </List>\n);\n\nexport const UserEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"userName\"/>\n            <PasswordInput source=\"password\"/>\n            <AutocompleteInput source=\"role\" choices={ROLES}/>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const UserCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"userName\"/>\n            <PasswordInput source=\"password\"/>\n            <AutocompleteInput source=\"role\" choices={ROLES}/>\n        </SimpleForm>\n    </Create>\n);\n","import * as React from 'react';\nimport {\n    Datagrid,\n    List,\n    ReferenceField,\n    TextField,\n    Edit,\n    SimpleForm,\n    TextInput,\n    PasswordInput,\n    Create,\n    AutocompleteInput,\n    ReferenceInput,\n    SelectInput\n} from 'react-admin';\nimport {ROLES} from \"../constants\";\n\nexport const ClientsList = props => (\n    <List {...props} sort={{field: \"name\", order: \"DESC\"}}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"name\"/>\n            <ReferenceField source=\"userId\" reference=\"users\"><TextField source=\"userName\"/></ReferenceField>\n        </Datagrid>\n    </List>\n);\n\nexport const ClientEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <ReferenceInput source=\"userId\" reference=\"users\"><SelectInput optionText=\"userName\" /></ReferenceInput>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const ClientCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <ReferenceInput source=\"userId\" reference=\"users\"><SelectInput optionText=\"userName\" /></ReferenceInput>\n        </SimpleForm>\n    </Create>\n);\n","import * as React from 'react';\nimport {BooleanInput, List, Datagrid, TextField, BooleanField, Edit, SimpleForm, TextInput, PasswordInput, Create, AutocompleteInput} from 'react-admin';\n\nexport const NotificationTypeList = props => (\n    <List {...props} sort={{field: \"title\", order: \"DESC\"}}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"displayText\"/>\n            <TextField source=\"title\"/>\n            <TextField source=\"body\"/>\n            <TextField source=\"description\"/>\n            <BooleanField source=\"textToSpeech\"/>\n        </Datagrid>\n    </List>\n);\n\nexport const NotificationTypeEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput label=\"Display Text\" source=\"displayText\"/>\n            <TextInput source=\"title\"/>\n            <TextInput multiline={true} source=\"body\"/>\n            <TextInput source=\"description\"/>\n            <BooleanInput source=\"textToSpeech\"/>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const NotificationTypeCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"displayText\"/>\n            <TextInput source=\"title\"/>\n            <TextInput multiline={true} source=\"body\"/>\n            <TextInput source=\"description\"/>\n            <BooleanInput source=\"textToSpeech\"/>\n        </SimpleForm>\n    </Create>\n);\n","import * as React from 'react';\nimport {\n    ArrayField,\n    ArrayInput,\n    ChipField,\n    Create,\n    Datagrid,\n    Edit,\n    List,\n    ReferenceField,\n    ReferenceInput,\n    ReferenceArrayField,\n    SelectInput,\n    SimpleForm,\n    SimpleFormIterator,\n    SingleFieldList,\n    TextField,\n    TextInput,\n    AutocompleteInput,\n    FormDataConsumer,\n    FunctionField\n} from \"react-admin\";\nimport {RULE_TYPES} from \"../constants\";\n\nexport const ConfigurationList = props => (\n    <List {...props} sort={{field: \"name\", order: \"DESC\"}}>\n        <Datagrid rowClick=\"edit\">\n            <ReferenceField source=\"clientId\" reference=\"clients\"><TextField source=\"name\"/></ReferenceField>\n            <TextField source=\"name\"/>\n\n            <ArrayField label=\"Rule Parameters\" source=\"ruleParameters\">\n                <Datagrid>\n                    <TextField label=\"Rule Type\" source=\"ruleType\"></TextField>\n                    <FunctionField label=\"Value\" render={({ruleType, _}) =>\n                        ruleType === \"SENDER\"\n                        && <ReferenceField source=\"value\" reference=\"clients\"><TextField source=\"name\"/></ReferenceField>\n                        || <ReferenceField source=\"value\" reference=\"notificationtypes\"><TextField source=\"displayText\"/></ReferenceField>\n                    }>\n                    </FunctionField>\n                </Datagrid>\n            </ArrayField>\n\n\n            <ReferenceArrayField label=\"Notification Types\" source=\"notificationTypes\" reference=\"notificationtypes\">\n                <SingleFieldList>\n                    <ChipField source=\"title\"/>\n                </SingleFieldList>\n            </ReferenceArrayField>\n\n            <ReferenceArrayField label=\"Call Types\" source=\"callTypes\" reference=\"calltypes\">\n                <SingleFieldList>\n                    <ChipField source=\"displayText\"/>\n                </SingleFieldList>\n            </ReferenceArrayField>\n        </Datagrid>\n    </List>\n);\n\nexport const ConfigurationEdit = props => (\n    <Edit {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"clientId\" reference=\"clients\"><SelectInput optionText=\"name\"/></ReferenceInput>\n            <TextInput source=\"name\"/>\n            <ArrayInput source=\"ruleParameters\"><SimpleFormIterator>\n                <AutocompleteInput label=\"Rule Type\" source=\"ruleType\" choices={RULE_TYPES}/>\n                <FormDataConsumer>\n                    {({\n                          formData,\n                          scopedFormData,\n                          getSource,\n                          ...rest\n                      }) =>\n                        scopedFormData && scopedFormData.ruleType === \"SENDER\" &&\n                        (\n                            <ReferenceInput label=\"Value\" source={getSource('value')}\n                                            reference=\"clients\" {...rest}><SelectInput\n                                optionText=\"name\"/></ReferenceInput>\n                        )\n                    }\n                </FormDataConsumer>\n                <FormDataConsumer>\n                    {({\n                          formData,\n                          scopedFormData,\n                          getSource,\n                          ...rest\n                      }) =>\n                        scopedFormData && scopedFormData.ruleType === \"NOTIFICATION_TYPE\" &&\n                        (\n                            <ReferenceInput label=\"Value\" source={getSource('value')}\n                                            reference=\"notificationtypes\" {...rest}><SelectInput\n                                optionText=\"title\"/></ReferenceInput>\n                        )\n                    }\n                </FormDataConsumer>\n            </SimpleFormIterator>\n            </ArrayInput>\n            <ArrayInput source=\"notificationTypes\">\n                <SimpleFormIterator>\n                    <ReferenceInput reference=\"notificationtypes\"><SelectInput optionText=\"title\"/></ReferenceInput>\n                </SimpleFormIterator>\n            </ArrayInput>\n            <ArrayInput source=\"callTypes\">\n                <SimpleFormIterator>\n                    <ReferenceInput reference=\"calltypes\"><SelectInput optionText=\"displayText\"/></ReferenceInput>\n                </SimpleFormIterator>\n            </ArrayInput>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const ConfigurationCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <ReferenceInput source=\"clientId\" reference=\"clients\"><SelectInput optionText=\"name\"/></ReferenceInput>\n            <TextInput source=\"name\"/>\n            <ArrayInput source=\"ruleParameters\"><SimpleFormIterator>\n                <AutocompleteInput label=\"Rule Type\" source=\"ruleType\" choices={RULE_TYPES}/>\n                <FormDataConsumer>\n                    {({\n                          formData,\n                          scopedFormData,\n                          getSource,\n                          ...rest\n                      }) =>\n                        scopedFormData && scopedFormData.ruleType === \"SENDER\" &&\n                        (\n                            <ReferenceInput label=\"Value\" source={getSource('value')}\n                                            reference=\"clients\" {...rest}><SelectInput\n                                optionText=\"name\"/></ReferenceInput>\n                        )\n                    }\n                </FormDataConsumer>\n                <FormDataConsumer>\n                    {({\n                          formData,\n                          scopedFormData,\n                          getSource,\n                          ...rest\n                      }) =>\n                        scopedFormData && scopedFormData.ruleType === \"NOTIFICATION_TYPE\" &&\n                        (\n                            <ReferenceInput label=\"Value\" source={getSource('value')}\n                                            reference=\"notificationtypes\" {...rest}><SelectInput\n                                optionText=\"title\"/></ReferenceInput>\n                        )\n                    }\n                </FormDataConsumer>\n            </SimpleFormIterator>\n            </ArrayInput>\n            <ArrayInput source=\"notificationTypes\">\n                <SimpleFormIterator>\n                    <ReferenceInput reference=\"notificationtypes\"><SelectInput optionText=\"title\"/></ReferenceInput>\n                </SimpleFormIterator>\n            </ArrayInput>\n            <ArrayInput source=\"callTypes\">\n                <SimpleFormIterator>\n                    <ReferenceInput reference=\"calltypes\"><SelectInput optionText=\"displayText\"/></ReferenceInput>\n                </SimpleFormIterator>\n            </ArrayInput>\n        </SimpleForm>\n    </Create>\n);\n","import * as React from 'react';\nimport {\n    ArrayField,\n    ArrayInput,\n    ChipField,\n    Create,\n    Datagrid,\n    Edit,\n    List,\n    ReferenceField,\n    ReferenceInput,\n    ReferenceArrayField,\n    SelectInput,\n    SimpleForm,\n    SimpleFormIterator,\n    SingleFieldList,\n    TextField,\n    TextInput,\n    AutocompleteInput,\n    FormDataConsumer,\n    FunctionField\n} from \"react-admin\";\n\nexport const CallTypeList = props => (\n    <List {...props}>\n        <Datagrid rowClick=\"edit\">\n            <TextField source=\"displayText\"/>\n            <ReferenceArrayField source=\"participants\" reference=\"clients\">\n                <SingleFieldList>\n                    <ChipField source=\"name\"/>\n                </SingleFieldList>\n            </ReferenceArrayField>\n        </Datagrid>\n    </List>\n);\n\nexport const CallTypeEdit = props => (\n  <Edit {...props}>\n      <SimpleForm>\n          <TextInput source=\"displayText\"/>\n          <ArrayInput source=\"participants\">\n              <SimpleFormIterator>\n                  <ReferenceInput reference=\"clients\"><SelectInput optionText=\"name\"/></ReferenceInput>\n              </SimpleFormIterator>\n          </ArrayInput>\n  </SimpleForm>\n  </Edit>\n);\n\nexport const CallTypeCreate = props => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"displayText\"/>\n            <ArrayInput source=\"participants\">\n                <SimpleFormIterator>\n                    <ReferenceInput reference=\"clients\"><SelectInput optionText=\"name\"/></ReferenceInput>\n                </SimpleFormIterator>\n            </ArrayInput>\n        </SimpleForm>\n    </Create>\n);\n\n","import './App.css';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './dataProvider';\nimport authProvider from \"./authProvider\";\nimport {UserList, UserCreate, UserEdit} from \"./components/users\";\nimport {ClientCreate, ClientEdit, ClientsList} from \"./components/clients\";\nimport {NotificationTypeList, NotificationTypeEdit, NotificationTypeCreate} from \"./components/notificationtypes\";\nimport {ConfigurationCreate, ConfigurationEdit, ConfigurationList} from \"./components/configurations\";\nimport {CallTypeCreate, CallTypeEdit, CallTypeList} from \"./components/calltypes\"\n\n\nfunction App() {\n  return (\n      <Admin dataProvider={dataProvider} authProvider={authProvider}>\n        <Resource name='users' list={UserList} edit={UserEdit} create={UserCreate}/>\n        <Resource name='clients' list={ClientsList} edit={ClientEdit} create={ClientCreate}/>\n        <Resource name='notificationtypes' list={NotificationTypeList} edit={NotificationTypeEdit} create={NotificationTypeCreate} options={{ label: 'Notification Types' }}/>\n        <Resource name='configurations' list={ConfigurationList} edit={ConfigurationEdit} create={ConfigurationCreate}/>\n        <Resource name='calltypes' list={CallTypeList} edit={CallTypeEdit} create={CallTypeCreate}/>\n      </Admin>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const BACKEND_BASE_URL = process.env.REACT_APP_BACKEND_BASE_URI\nexport const API_URL = `${BACKEND_BASE_URL}/api`\nexport const LOGIN_URL = `${API_URL}/users/login`\n","const inMemoryJWTManager = () => {\n    let inMemoryJWT = null;\n\n    const getToken = () => inMemoryJWT;\n\n    const setToken = (token) => {\n        inMemoryJWT = token;\n        return true;\n    };\n\n    const ereaseToken = () => {\n        inMemoryJWT = null;\n        return true;\n    }\n\n    return {\n        ereaseToken,\n        getToken,\n        setToken,\n    }\n};\n\nexport default inMemoryJWTManager();\n"],"sourceRoot":""}